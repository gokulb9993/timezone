{"version":3,"sources":["TableList.js","constant.js","App.js","serviceWorker.js","index.js"],"names":["interval","ZONE","TableList","props","formatTableContent","area","parsedData","forEach","item","time","moment","tz","timeZone","ist_difference","utcOffset","push","name","tagg","tag","date","format","_24Hrs","_12Hrs","Math","abs","toString","replace","plus_minus","startsWith","getColums","Header","accessor","state","data","setInterval","setState","clearInterval","this","TableSection","Table","map","Component","styled","div","table","App","Object","keys","Section","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56321559.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as moment from 'moment-timezone';\nimport styled from 'styled-components';\nlet interval;\n\nclass TableList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.formatTableContent()\n        }\n    }\n\n    componentDidMount() {\n        interval = setInterval(() => {\n            this.setState({ data: this.formatTableContent() })\n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(interval);\n    }\n\n    formatTableContent = () => {\n        const { area } = this.props\n        let parsedData = [];\n        area.forEach(item => {\n            const time = moment().tz(item.timeZone);\n            let ist_difference = (moment.tz(item.timeZone).utcOffset() - moment.tz(\"Asia/Kolkata\").utcOffset()) / 60;\n            parsedData.push({\n                name: item.name,\n                tagg: item.tag,\n                date: time.format(\"MMMM d, Y\"),\n                _24Hrs: time.format(\"H:mm:ss\"),\n                _12Hrs: time.format(\"h:mm:ss A\"),\n                ist_difference: Math.abs(ist_difference).toString().replace('.5', ':30'),\n                plus_minus: ist_difference.toString().startsWith('-') ? '-' : '+'\n            });\n        })\n        return parsedData;\n    }\n\n    getColums = () => {\n        return [{\n            Header: 'Name',\n            accessor: 'name'\n        }, {\n            Header: 'Tagging',\n            accessor: 'tagg'\n        }, {\n            Header: 'Date',\n            accessor: 'date'\n        }, {\n            Header: '24hrs Time',\n            accessor: '_24Hrs'\n        }, {\n            Header: '12hrs Time',\n            accessor: '_12Hrs'\n        }, {\n            Header: 'IST Difference',\n            accessor: 'ist_difference'\n        }, {\n            Header: 'Plus/Minus',\n            accessor: 'plus_minus'\n        }];\n    }\n\n    render() {\n        const { data } = this.state;\n        return (\n            <TableSection>\n                <Table>\n                    <thead>\n                        <tr>\n                            <td>Name</td>\n                            <td>Tagging</td>\n                            <td>Date</td>\n                            <td>24hrs Time</td>\n                            <td>12hrs Time</td>\n                            <td>IST Difference</td>\n                            <td>Plus/Minus</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {data.map(item => {\n                            return (\n                                <tr>\n                                    <td>{item.name}</td>\n                                    <td>{item.tagg}</td>\n                                    <td>{item.date}</td>\n                                    <td>{item._24Hrs}</td>\n                                    <td>{item._12Hrs}</td>\n                                    <td>{item.ist_difference}</td>\n                                    <td>{item.plus_minus}</td>\n                                </tr>\n                            )\n                        })\n                        }\n                    </tbody>\n                </Table>\n            </TableSection>\n        )\n    }\n}\n\nexport default TableList;\n\nconst TableSection = styled.div`\n    width: 100%;\n\n    thead {\n        margin-top: 30px;\n        background-color: #0e1921;\n        display: table-header-group;\n        break-inside: avoid;\n\n        td {\n            color: #ffffff;\n            font-weight: 400;\n        }\n    }\n    \n    tr td {\n        height: 30px;\n    }\n    \n    th,  td {\n        border: 1px solid #0e1921;\n        color: #183247;\n        width: 200px;\n        text-align: center;\n    }\n    \n    th {\n        padding: 8px;\n    }\n    \n    tr {\n        height: auto;\n    }\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    border-spacing: 0px;\n`;","export const ZONE = {\n    \"EMEA\" : [\n        {\n            \"name\": \"Amstredam\",\n            \"tag\": \"[AMS]\",\n            \"timeZone\": \"Europe/Berlin\"\n        },\n        {\n            \"name\": \"Frankfurt\",\n            \"tag\": \"[FRA]\",\n            \"timeZone\": \"Europe/Berlin\"\n        },\n        {\n            \"name\": \"Moscow\",\n            \"tag\": \"[MOS]\",\n            \"timeZone\": \"Europe/Moscow\"\n        },\n        {\n            \"name\": \"Rot\",\n            \"tag\": \"[ROT]\",\n            \"timeZone\": \"Europe/Berlin\"\n        },\n        {\n            \"name\": \"Walldorf\",\n            \"tag\": \"[WDF]\",\n            \"timeZone\": \"Europe/Berlin\"\n        }\n    ],\n    \"AMER\": [\n        {\n            \"name\": \"Ashburn\",\n            \"tag\": \"[ASH]\",\n            \"timeZone\": \"America/New_York\"\n        },\n        {\n            \"name\": \"Chandler\",\n            \"tag\": \"[CHA]\",\n            \"timeZone\": \"America/Los_Angeles\"\n        },\n        {\n            \"name\": \"Colorado Springs\",\n            \"tag\": \"[COS]\",\n            \"timeZone\": \"America/Denver\"\n        },\n        {\n            \"name\": \"Northern Square\",\n            \"tag\": \"[NSQ]\",\n            \"timeZone\": \"America/New_York\"\n        },\n        {\n            \"name\": \"Santa Clara\",\n            \"tag\": \"[SCL]\",\n            \"timeZone\": \"America/Los_Angeles\"\n        },\n        {\n            \"name\": \"Sao Paulo\",\n            \"tag\": \"[SAO]\",\n            \"timeZone\": \"America/Sao_Paulo\"\n        },\n        {\n            \"name\": \"Sterling\",\n            \"tag\": \"[STE]\",\n            \"timeZone\": \"America/New_York\"\n        },\n        {\n            \"name\": \"Toronto\",\n            \"tag\": \"[TOR]\",\n            \"timeZone\": \"America/Toronto\"\n        },\n        {\n            \"name\": \"Waltham\",\n            \"tag\": \"[WLH]\",\n            \"timeZone\": \"America/New_York\"\n        }\n    ],\n    \"APJ\": [\n        {\n            \"name\": \"Beijing\",\n            \"tag\": \"[BJN]\",\n            \"timeZone\": \"Asia/Shanghai\"\n        },\n        {\n            \"name\": \"Dammam\",\n            \"tag\": \"[DAM]\",\n            \"timeZone\": \"Asia/Riyadh\"\n        },\n        {\n            \"name\": \"Dubai\",\n            \"tag\": \"[DUB]\",\n            \"timeZone\": \"Asia/Dubai\"\n        },\n        {\n            \"name\": \"Osaka\",\n            \"tag\": \"[OSA]\",\n            \"timeZone\": \"Asia/Tokyo\"\n        },\n        {\n            \"name\": \"Riyadh\",\n            \"tag\": \"[RYD]\",\n            \"timeZone\": \"Asia/Riyadh\"\n        },\n        {\n            \"name\": \"Shanghai\",\n            \"tag\": \"[SHA]\",\n            \"timeZone\": \"Asia/Shanghai\"\n        },\n        {\n            \"name\": \"Singapore\",\n            \"tag\": \"[SNG]\",\n            \"timeZone\": \"Asia/Singapore\"\n        },\n        {\n            \"name\": \"Sydney\",\n            \"tag\": \"[SYD]\",\n            \"timeZone\": \"Australia/Brisbane\"\n        },\n        {\n            \"name\": \"Tokyo\",\n            \"tag\": \"[TOK]\",\n            \"timeZone\": \"Asia/Tokyo\"\n        }\n    ]\n};","import React, { Component } from 'react';\nimport './App.css';\nimport { ZONE } from './constant';\nimport TableList from './TableList';\nimport styled from 'styled-components';\n\nclass App extends Component {\n\n  render() {\n    return(\n        Object.keys(ZONE).map(item => {\n          return (\n            <Section>\n              <Header>{item}</Header>\n              <TableList area={ZONE[item]}/>\n            </Section>\n          )\n        })\n    )\n  }\n}\n\nexport default App;\n\nconst Section = styled.div`\n  display: flex;\n  place-items: center;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  height: 30px;\n  display: flex;\n  color: #ffffff;\n  font-weight: 400;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  background-color: #0e1921;\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}